#include "services/AuthService.hpp"

#include <tuple>

#include "controllers/WalletController.hpp"
#include "models/User.hpp"
#include "utils/Hash.hpp"
#include "utils/MessageHandler.hpp"
#include "utils/Password.hpp"
#include "utils/Storage.hpp"

namespace services {

std::tuple<bool, int, bool> AuthService::login(const std::string& username,
                                               const std::string& password) {
  try {
    json users = utils::storage::readJsonFile("data/users.json");

    for (const auto& user : users) {
      if (user["username"] == username) {
        bool isMatchPassword =
            utils::hash::validatePassword(password, user["passwordHash"]);
        if (!isMatchPassword) break;

        utils::MessageHandler::logSuccess("Đăng nhập thành công");
        return {true, user["id"], user["isAdmin"]};
      }
    }

    utils::MessageHandler::logError("Tên đăng nhập hoặc mật khẩu không đúng!");
    return {false, -1, false};
  } catch (const std::exception& e) {
    utils::MessageHandler::logError("Lỗi đăng nhập: " + std::string(e.what()));
    return {false, -1, false};
  }
}

bool AuthService::registerUser(const std::string& username,
                               const std::string& password,
                               const std::string& email,
                               const std::string& fullName) {
  try {
    if (!userService.validateUserData(username, email)) {
      return false;
    }

    models::User newUser =
        userService.createUser(username, password, email, fullName);
    if (!userService.saveUser(newUser)) {
      return false;
    }

    // Tự động tạo ví cho user mới
    controllers::WalletController walletController;
    if (!walletController.createWallet(newUser.getId(), 0.0)) {
      utils::MessageHandler::logWarning(
          "Cảnh báo: Không thể tạo ví cho user mới!");
    }

    utils::MessageHandler::logSuccess("Đăng ký thành công!");
    return true;
  } catch (const std::exception& e) {
    utils::MessageHandler::logError("Lỗi đăng ký: " + std::string(e.what()));
    return false;
  }
}

bool AuthService::registerUserByAdmin(const std::string& username,
                                      const std::string& email,
                                      const std::string& fullName,
                                      std::string& generatedPassword) {
  try {
    if (!userService.validateUserData(username, email)) {
      return false;
    }

    generatedPassword = utils::password::generateRandomPassword(8);
    models::User newUser =
        userService.createUser(username, generatedPassword, email, fullName);
    newUser.setIsPasswordAutoGenerated(true);

    if (!userService.saveUser(newUser)) {
      return false;
    }

    // Tự động tạo ví cho user mới
    controllers::WalletController walletController;
    if (!walletController.createWallet(newUser.getId(), 0.0)) {
      utils::MessageHandler::logWarning(
          "Cảnh báo: Không thể tạo ví cho user mới!");
    }

    utils::MessageHandler::logSuccess("Tạo user thành công!");
    return true;
  } catch (const std::exception& e) {
    utils::MessageHandler::logError("Lỗi tạo user: " + std::string(e.what()));
    return false;
  }
}

bool AuthService::changePassword(int userId, const std::string& currentPassword,
                                 const std::string& newPassword) {
  try {
    json userData;
    if (!userService.findUserById(userId, userData)) {
      utils::MessageHandler::logError("Không tìm thấy user cần đổi mật khẩu!");
      return false;
    }

    bool isMatchPassword = utils::hash::validatePassword(
        currentPassword, userData["passwordHash"]);
    if (!isMatchPassword) {
      utils::MessageHandler::logError("Mật khẩu hiện tại không đúng!");
      return false;
    }

    return updateUserPassword(userId, newPassword);
  } catch (const std::exception& e) {
    utils::MessageHandler::logError("Lỗi đổi mật khẩu: " +
                                    std::string(e.what()));
    return false;
  }
}

bool AuthService::updateUserPassword(int userId,
                                     const std::string& newPassword) {
  try {
    json users = utils::storage::readJsonFile("data/users.json");
    for (auto& user : users) {
      if (user["id"] == userId) {
        user["passwordHash"] = utils::hash::generatePasswordHash(newPassword);
        user["isPasswordAutoGenerated"] = false;

        if (!utils::storage::writeJsonFile("data/users.json", users)) {
          utils::MessageHandler::logError(
              "Không thể lưu thông tin người dùng!");
          return false;
        }

        return true;
      }
    }

    utils::MessageHandler::logError("Không tìm thấy user cần đổi mật khẩu!");
    return false;
  } catch (const std::exception& e) {
    utils::MessageHandler::logError("Lỗi cập nhật mật khẩu: " +
                                    std::string(e.what()));
    return false;
  }
}

}  // namespace services