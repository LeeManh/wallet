
#include "services/AuthService.hpp"

#include <tuple>

#include "exceptions/Exception.hpp"
#include "models/User.hpp"
#include "services/UserService.hpp"
#include "services/WalletService.hpp"
#include "utils/ExceptionHandler.hpp"
#include "utils/Hash.hpp"
#include "utils/MessageHandler.hpp"
#include "utils/Password.hpp"
#include "utils/Storage.hpp"

namespace services {

std::tuple<bool, int, bool> AuthService::login(const std::string& username,
                                               const std::string& password) {
  json users = utils::storage::readJsonFile("data/users.json");

  for (const auto& user : users) {
    if (user["username"] == username) {
      bool isMatchPassword =
          utils::hash::validatePassword(password, user["passwordHash"]);
      if (!isMatchPassword)
        throw exceptions::AuthException(
            "Tên đăng nhập hoặc mật khẩu không đúng!");

      return {true, user["id"], user["isAdmin"]};
    }
  }

  throw exceptions::AuthException("Tài khoản không tồn tại");
}

bool AuthService::registerUser(const std::string& username,
                               const std::string& password,
                               const std::string& email,
                               const std::string& fullName) {
  // Validate data
  UserService::validateUserData(username, email);

  // Tạo user mới
  models::User newUser =
      UserService::createUser(username, password, email, fullName);

  // Tự động tạo ví cho user mới
  try {
    WalletService::createWallet(newUser.getId(), 0.0);
  } catch (const std::exception& e) {
    // Rollback user creation
    UserService::deleteUser(newUser.getId());

    throw;
  }

  return true;
}

bool AuthService::registerUserByAdmin(const std::string& username,
                                      const std::string& email,
                                      const std::string& fullName,
                                      std::string& generatedPassword) {
  // Validate data
  UserService::validateUserData(username, email);

  // Tạo user mới
  generatedPassword = utils::password::generateRandomPassword(8);
  models::User newUser =
      UserService::createUser(username, generatedPassword, email, fullName);
  newUser.setIsPasswordAutoGenerated(true);

  // Tự động tạo ví cho user mới
  try {
    WalletService::createWallet(newUser.getId(), 0.0);
  } catch (const std::exception& e) {
    // Rollback user creation
    UserService::deleteUser(newUser.getId());

    throw;
  }

  return true;
}

bool AuthService::changePassword(int userId, const std::string& currentPassword,
                                 const std::string& newPassword) {
  auto userJson = UserService::findUserById(userId);

  if (!userJson.has_value())
    throw exceptions::NotFoundException("User không tồn tại");

  // Kiểm tra mật khẩu có đúng không
  bool isMatchPassword = utils::hash::validatePassword(
      currentPassword, userJson.value()["passwordHash"]);
  if (!isMatchPassword)
    throw exceptions::ValidationException("Mật khẩu hiện tại không đúng!");

  return updateUserPassword(userId, newPassword);
}

bool AuthService::updateUserPassword(int userId,
                                     const std::string& newPassword) {
  json users = utils::storage::readJsonFile("data/users.json");

  for (auto& user : users) {
    if (user["id"] == userId) {
      user["passwordHash"] = utils::hash::generatePasswordHash(newPassword);
      user["isPasswordAutoGenerated"] = false;

      utils::storage::writeJsonFile("data/users.json", users);

      return true;
    }
  }

  throw exceptions::NotFoundException("User không tồn tại");
}

}  // namespace services