
#include "services/AuthService.hpp"

#include <sstream>
#include <tuple>

#include "exceptions/Exception.hpp"
#include "models/User.hpp"
#include "services/OtpService.hpp"
#include "services/UserService.hpp"
#include "services/WalletService.hpp"
#include "utils/ExceptionHandler.hpp"
#include "utils/Hash.hpp"
#include "utils/Input.hpp"
#include "utils/MessageHandler.hpp"
#include "utils/Password.hpp"
#include "utils/Storage.hpp"
#include "utils/Format.hpp"

namespace services {

/**
 * @brief Xác thực đăng nhập người dùng.
 *
 * Input:
 *   - username: Tên đăng nhập.
 *   - password: Mật khẩu.
 *
 * Output:
 *   - Trả về tuple (đăng nhập thành công?, id người dùng, có phải admin?, mật
 * khẩu tự động?).
 *   - Ném AuthException nếu tên đăng nhập hoặc mật khẩu không đúng, hoặc tài
 * khoản không tồn tại.
 *
 * Thủ tục xử lý:
 *   1. Đọc danh sách người dùng từ file users.json.
 *   2. Tìm người dùng trùng username.
 *   3. So khớp mật khẩu băm.
 *   4. Nếu hợp lệ, trả về thông tin đăng nhập; nếu sai, ném ngoại lệ.
 */
std::tuple<bool, int, bool, bool> AuthService::login(
    const std::string& username, const std::string& password) {
  json users = utils::storage::readJsonFile("data/users.json");

  for (const auto& user : users) {
    if (user["username"] == username) {
      bool isMatchPassword =
          utils::hash::validatePassword(password, user["passwordHash"]);
      bool isPasswordAutoGenerated =
          user["isPasswordAutoGenerated"].get<bool>();
      if (!isMatchPassword)
        throw exceptions::AuthException(
            "Tên đăng nhập hoặc mật khẩu không đúng!");

      return {true, user["id"], user["isAdmin"], isPasswordAutoGenerated};
    }
  }

  throw exceptions::AuthException("Tài khoản không tồn tại");
}

/**
 * @brief Đăng ký tài khoản mới.
 *
 * Input:
 *   - username: Tên đăng nhập.
 *   - password: Mật khẩu.
 *   - email: Địa chỉ email.
 *   - fullName: Họ và tên đầy đủ.
 *
 * Output:
 *   - Trả về true nếu tạo tài khoản và ví thành công.
 *   - Ném ngoại lệ nếu dữ liệu không hợp lệ hoặc tạo ví thất bại.
 *
 * Thủ tục xử lý:
 *   1. Kiểm tra dữ liệu hợp lệ.
 *   2. Tạo người dùng mới.
 *   3. Tạo ví với số dư ban đầu = 0.
 *   4. Nếu lỗi khi tạo ví, rollback và ném ngoại lệ.
 */
bool AuthService::registerUser(const std::string& username,
                               const std::string& password,
                               const std::string& email,
                               const std::string& fullName) {
  // Validate data
  UserService::validateUserData(username, email);

  // Tạo user mới
  models::User newUser =
      UserService::createUser(username, password, email, fullName);

  // Tự động tạo ví cho user mới
  try {
    WalletService::createWallet(newUser.getId(), 0.0);
  } catch (const std::exception& e) {
    // Rollback user creation
    UserService::deleteUser(newUser.getId());

    throw;
  }

  return true;
}

/**
 * @brief Tạo mới một người dùng bởi admin và gán mật khẩu ngẫu nhiên.
 *
 * Input:
 *   - username: Tên đăng nhập.
 *   - email: Địa chỉ email.
 *   - fullName: Họ và tên đầy đủ.
 *   - generatedPassword: Biến tham chiếu để trả mật khẩu tự sinh.
 *
 * Output:
 *   - Trả về true nếu tạo tài khoản và ví thành công.
 *   - Ném ngoại lệ nếu dữ liệu không hợp lệ hoặc tạo ví thất bại.
 *
 * Thủ tục xử lý:
 *   1. Kiểm tra dữ liệu hợp lệ.
 *   2. Sinh mật khẩu ngẫu nhiên 8 ký tự.
 *   3. Tạo tài khoản.
 *   4. Tạo ví số dư = 0.
 *   5. Nếu lỗi khi tạo ví, rollback và ném ngoại lệ.
 */
bool AuthService::registerUserByAdmin(const std::string& username,
                                      const std::string& email,
                                      const std::string& fullName,
                                      std::string& generatedPassword) {
  // Validate data
  UserService::validateUserData(username, email);

  // Tạo user mới
  generatedPassword = utils::password::generateRandomPassword(8);
  models::User newUser = UserService::createUser(username, generatedPassword,
                                                 email, fullName, false, true);

  // Tự động tạo ví cho user mới
  try {
    WalletService::createWallet(newUser.getId(), 0.0);
  } catch (const std::exception& e) {
    // Rollback user creation
    UserService::deleteUser(newUser.getId());

    throw;
  }

  return true;
}

/**
 * @brief Xác thực OTP khi thay đổi thông tin người dùng.
 *
 * Input:
 *   - userId: ID người dùng.
 *   - email: Email để gửi OTP.
 *
 * Output: Không trả về giá trị, ném ngoại lệ nếu OTP không hợp lệ.
 *
 * Thủ tục xử lý:
 *   1. Gửi OTP đến email người dùng.
 *   2. Yêu cầu nhập OTP từ bàn phím.
 *   3. Xác minh OTP.
 */
void AuthService::otpValidation(const int userId, const std::string& email) {
  // Input OTP
  utils::MessageHandler::logMessage("Gửi mã OTP để xác thực...");
  services::OtpService::generateAndSendOTP(userId, email,
                                           enums::OTPType::INFO_CHANGE);

  // Tạo và xác minh OTP
  std::string otpCode = utils::input::getInput("Nhập mã OTP đã được gửi: ");
  utils::MessageHandler::logMessage(
      "───────────────────────────────────────────────");

  services::OtpService::verifyOTP(userId, otpCode, enums::OTPType::INFO_CHANGE);
}

/**
 * @brief Chỉnh sửa thông tin cá nhân của người dùng.
 *
 * Input:
 *   - userId: ID người dùng.
 *   - newFullName: Họ tên mới (có thể bỏ trống).
 *   - newEmail: Email mới (có thể bỏ trống).
 *
 * Output:
 *   - Trả về true nếu cập nhật thành công.
 *   - Ném NotFoundException nếu user không tồn tại.
 *
 * Thủ tục xử lý:
 *   1. Xác thực email mới (nếu có).
 *   2. Tìm user trong file users.json.
 *   3. Nếu có họ tên mới hoặc email mới:
      - Hiển thị danh sách thay đổi
      - Gửi OTP xác nhận thay đổi.
 *   4. Nếu OTP xác thực thành công, lưu thay đổi vào file.
 */
bool AuthService::editUserInfo(int userId, const std::string& newFullName,
                               const std::string& newEmail) {
  // Validate new email
  if (!newEmail.empty()) {
    UserService::validateUserEmail(userId, newEmail);
  }

  json users = utils::storage::readJsonFile("data/users.json");
  bool found = false;

  for (auto& user : users) {
    if (user["id"] == userId) {
      std::string oldFullName = user["fullName"];
      std::string oldEmail = user["email"];

      // Xây dựng thông báo thay đổi
      std::ostringstream changeMsg;
      bool hasChange = false;
      const int fieldWidth = 10;
      const int valueWidth = 40;

      changeMsg << "🔄 Các thay đổi:\n";
      changeMsg << "+" << std::string(fieldWidth+2, '-') << "+"
                << std::string(valueWidth+2, '-') << "+\n";
      changeMsg << "| " << utils::format::padRight("Trường", fieldWidth)
                << " | " << utils::format::padRight("Thay đổi", valueWidth) << " |\n";
      changeMsg << "+" << std::string(fieldWidth+2, '-') << "+"
                << std::string(valueWidth+2, '-') << "+\n";

      // Họ tên
      if (!newFullName.empty() && newFullName != oldFullName) {
        std::string change = oldFullName + " → " + newFullName;
        auto lines = utils::format::wrapText(change, valueWidth);
        changeMsg << "| " << utils::format::padRight("Họ tên", fieldWidth) << " | "
                  << utils::format::padRight(lines[0], valueWidth) << " |\n";
        for (size_t i = 1; i < lines.size(); ++i) {
          changeMsg << "| " << utils::format::padRight("", fieldWidth) << " | "
                    << utils::format::padRight(lines[i], valueWidth) << " |\n";
        }
        changeMsg << "+" << std::string(fieldWidth+2, '-') << "+"
                  << std::string(valueWidth+2, '-') << "+\n";
        hasChange = true;
      }
      // Email
      if (!newEmail.empty() && newEmail != oldEmail) {
        std::string change = oldEmail + " → " + newEmail;
        auto lines = utils::format::wrapText(change, valueWidth);
        changeMsg << "| " << utils::format::padRight("Email", fieldWidth) << " | "
                  << utils::format::padRight(lines[0], valueWidth) << " |\n";
        for (size_t i = 1; i < lines.size(); ++i) {
          changeMsg << "| " << utils::format::padRight("", fieldWidth) << " | "
                    << utils::format::padRight(lines[i], valueWidth) << " |\n";
        }
        changeMsg << "+" << std::string(fieldWidth+2, '-') << "+"
                  << std::string(valueWidth+2, '-') << "+\n";
        hasChange = true;
      }

      // Nếu có thay đổi, gửi OTP xác nhận
      if (hasChange) {
        utils::MessageHandler::logMessage(
            "Hệ thống sẽ cập nhật thông tin sau khi bạn xác nhận OTP.\n");
        utils::MessageHandler::logMessage(changeMsg.str());
        otpValidation(userId, user["email"]);
      }
      // Cập nhật thông tin mới nếu đã xác thực OTP thành công
      if (!newFullName.empty()) {
        user["fullName"] = newFullName;
      }
      if (!newEmail.empty()) {
        user["email"] = newEmail;
      }
      found = true;
      break;
    }
  }

  if (!found) {
    throw exceptions::NotFoundException("User không tồn tại");
  }

  utils::storage::writeJsonFile("data/users.json", users);
  return true;
}

/**
 * @brief Đổi mật khẩu người dùng.
 *
 * Input:
 *   - userId: ID người dùng.
 *   - currentPassword: Mật khẩu hiện tại.
 *   - newPassword: Mật khẩu mới.
 *
 * Output:
 *   - Trả về true nếu đổi thành công.
 *   - Ném ngoại lệ nếu mật khẩu hiện tại sai hoặc user không tồn tại.
 *
 * Thủ tục xử lý:
 *   1. Tìm user theo ID.
 *   2. So khớp mật khẩu hiện tại.
 *   3. Nếu đúng, gọi updateUserPassword.
 */
bool AuthService::changePassword(int userId, const std::string& currentPassword,
                                 const std::string& newPassword) {
  auto userJson = UserService::findUserById(userId);

  if (!userJson.has_value())
    throw exceptions::NotFoundException("User không tồn tại");

  // Kiểm tra mật khẩu có đúng không
  bool isMatchPassword = utils::hash::validatePassword(
      currentPassword, userJson.value()["passwordHash"]);
  if (!isMatchPassword)
    throw exceptions::ValidationException("Mật khẩu hiện tại không đúng!");

  return updateUserPassword(userId, newPassword);
}

/**
 * @brief Cập nhật mật khẩu mới cho người dùng.
 *
 * Input:
 *   - userId: ID người dùng.
 *   - newPassword: Mật khẩu mới.
 *
 * Output:
 *   - Trả về true nếu cập nhật thành công.
 *   - Ném NotFoundException nếu user không tồn tại.
 *
 * Thủ tục xử lý:
 *   1. Đọc danh sách user từ file.
 *   2. Tìm user theo ID.
 *   3. Hash mật khẩu mới, cập nhật cờ isPasswordAutoGenerated = false.
 *   4. Lưu lại file.
 */
bool AuthService::updateUserPassword(int userId,
                                     const std::string& newPassword) {
  json users = utils::storage::readJsonFile("data/users.json");

  for (auto& user : users) {
    if (user["id"] == userId) {
      user["passwordHash"] = utils::hash::generatePasswordHash(newPassword);
      user["isPasswordAutoGenerated"] = false;

      utils::storage::writeJsonFile("data/users.json", users);

      return true;
    }
  }

  throw exceptions::NotFoundException("User không tồn tại");
}

}  // namespace services