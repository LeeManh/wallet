#include "services/UserService.hpp"

#include "exceptions/Exception.hpp"
#include "utils/ExceptionHandler.hpp"

namespace services {

void UserService::validateUserData(const std::string& username,
                                   const std::string& email) {
  json users = utils::storage::readJsonFile("data/users.json");

  for (const auto& user : users) {
    if (user["username"] == username)
      throw exceptions::ValidationException("Tên đăng nhập đã tồn tại!");

    if (user["email"] == email)
      throw exceptions::ValidationException("Email đã tồn tại");
  }
}

models::User UserService::createUser(const std::string& username,
                                     const std::string& password,
                                     const std::string& email,
                                     const std::string& fullName,
                                     const bool isAdmin,
                                     const bool isPasswordAutoGenerated) {
  json users = utils::storage::readJsonFile("data/users.json");
  int newUserId = utils::storage::getNextUserId(users);

  std::string passwordHash = utils::hash::generatePasswordHash(password);
  return models::User(newUserId, username, passwordHash, email, fullName,
                      isAdmin, isPasswordAutoGenerated);
}

bool UserService::saveUser(const models::User& user) {
  json users = utils::storage::readJsonFile("data/users.json");

  json userData;
  userData["id"] = user.getId();
  userData["username"] = user.getUsername();
  userData["passwordHash"] = user.getPasswordHash();
  userData["email"] = user.getEmail();
  userData["fullName"] = user.getFullName();
  userData["isAdmin"] = user.isAdminUser();
  userData["isPasswordAutoGenerated"] = user.getIsPasswordAutoGenerated();
  userData["createdAt"] = user.getCreatedAt();

  users.push_back(userData);

  if (!utils::storage::writeJsonFile("data/users.json", users)) {
    throw exceptions::StorageException("Không thể lưu thông tin người dùng!");
  }

  return true;
}

bool UserService::findUserById(int userId, json& userData) {
  json users = utils::storage::readJsonFile("data/users.json");
  for (const auto& user : users) {
    if (user["id"] == userId) {
      userData = user;
      return true;
    }
  }
  return false;
}

bool UserService::findUserByUsername(const std::string& username,
                                     json& userData) {
  json users = utils::storage::readJsonFile("data/users.json");
  for (const auto& user : users) {
    if (user["username"] == username) {
      userData = user;
      return true;
    }
  }
  return false;
}

std::string UserService::getUserEmail(int userId) {
  try {
    json users = utils::storage::readJsonFile("data/users.json");
    for (const auto& user : users) {
      if (user["id"] == userId) {
        return user["email"];
      }
    }
    return "";
  } catch (const std::exception& e) {
    utils::MessageHandler::logError("Lỗi lấy email: " + std::string(e.what()));
    return "";
  }
}

bool UserService::isUsernameExists(const json& users,
                                   const std::string& username) {
  for (const auto& user : users) {
    if (user["username"] == username) {
      return true;
    }
  }
  return false;
}

bool UserService::isEmailExists(const json& users, const std::string& email) {
  for (const auto& user : users) {
    if (user["email"] == email) {
      return true;
    }
  }
  return false;
}

}  // namespace services