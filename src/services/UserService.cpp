#include "services/UserService.hpp"

#include "exceptions/Exception.hpp"
#include "utils/ExceptionHandler.hpp"
#include "models/User.hpp"

namespace services {

  /**
   * @brief Kiểm tra dữ liệu người dùng có bị trùng username hoặc email.
   *
   * Input:
   *   - username: Tên đăng nhập cần kiểm tra.
   *   - email: Email cần kiểm tra.
   *
   * Output:
   *   - Ném ValidationException nếu username hoặc email đã tồn tại.
   *
   * Thủ tục xử lý:
   *   1. Đọc danh sách người dùng từ file users.json.
   *   2. Lặp qua danh sách, kiểm tra trùng username hoặc email.
   *   3. Nếu trùng, ném ngoại lệ.
   */
  void UserService::validateUserData(const std::string& username,
                                    const std::string& email) {
    json users = utils::storage::readJsonFile("data/users.json");

    for (const auto& user : users) {
      if (user["username"] == username)
        throw exceptions::ValidationException("Tên đăng nhập đã tồn tại!");

      if (user["email"] == email)
        throw exceptions::ValidationException("Email đã tồn tại");
    }
  }

  /**
   * @brief Kiểm tra email mới có bị trùng với user khác khi chỉnh sửa thông tin.
   *
   * Input:
   *   - userId: ID của user hiện tại.
   *   - email: Email mới.
   *
   * Output:
   *   - Ném ValidationException nếu email đã tồn tại ở user khác.
   *
   * Thủ tục xử lý:
   *   1. Đọc danh sách user từ file.
   *   2. Lặp qua danh sách, nếu trùng email và ID khác, ném ngoại lệ.
   */
  void UserService::validateUserEmail(const int userId, const std::string& email) {
    json users = utils::storage::readJsonFile("data/users.json");

    for (const auto& user : users) {
      if (user["email"] == email && user["id"] != userId)
        throw exceptions::ValidationException("Email đã tồn tại");
    }
  }

  /**
   * @brief Tạo mới một người dùng trong hệ thống.
   *
   * Input:
   *   - username: Tên đăng nhập.
   *   - password: Mật khẩu gốc.
   *   - email: Email.
   *   - fullName: Họ và tên đầy đủ.
   *   - isAdmin: Có phải admin hay không.
   *   - isPasswordAutoGenerated: Mật khẩu có được sinh tự động hay không.
   *
   * Output:
   *   - Trả về đối tượng User mới.
   *
   * Thủ tục xử lý:
   *   1. Lấy ID mới từ file.
   *   2. Hash mật khẩu.
   *   3. Tạo đối tượng User và convert sang JSON.
   *   4. Ghi vào file users.json.
   */
  models::User UserService::createUser(const std::string& username,
                                      const std::string& password,
                                      const std::string& email,
                                      const std::string& fullName,
                                      const bool isAdmin,
                                      const bool isPasswordAutoGenerated) {
    json users = utils::storage::readJsonFile("data/users.json");
    int newUserId = utils::storage::getNextUserId(users);

    std::string passwordHash = utils::hash::generatePasswordHash(password);
    models::User user(newUserId, username, passwordHash, email, fullName, isAdmin,
                      isPasswordAutoGenerated);

    json userData = user.toJson();
    users.push_back(userData);

    utils::storage::writeJsonFile("data/users.json", users);

    return user;
  }

  /**
   * @brief Lấy danh sách user theo quyền.
   *
   * Input:
   *   - isAdmin: true nếu lấy danh sách admin, false nếu lấy user thường.
   *
   * Output:
   *   - Trả về vector<User> chứa các user phù hợp.
   *   - Ném NotFoundException nếu không có user nào.
   *
   * Thủ tục xử lý:
   *   1. Đọc danh sách user từ file.
   *   2. Lọc theo cờ isAdmin.
   *   3. Trả về danh sách.
   */
  std::vector<models::User> UserService::getAllUsers(bool isAdmin) {
    json users = utils::storage::readJsonFile("data/users.json");
    if (users.empty()) {
      throw exceptions::NotFoundException("Không có người dùng nào trong hệ thống.");
    }

    std::vector<models::User> userList;
    for (const auto& user : users) {
      if (user["isAdmin"].get<bool>() == isAdmin) {
        models::User u(
          user["id"].get<int>(),
        user["username"].get<std::string>(),
        user["passwordHash"].get<std::string>(),
        user["email"].get<std::string>(),
        user["fullName"].get<std::string>(),
        user["isAdmin"].get<bool>(),
        user["isPasswordAutoGenerated"].get<bool>()
      );
      userList.push_back(u);
      }
    }
    return userList;
  }

  /**
   * @brief Lấy thông tin cụ thể của một user.
   *
   * Input:
   *   - user: Đối tượng User.
   *   - info: Enum loại thông tin cần lấy (ID, USERNAME, EMAIL, FULL_NAME).
   *
   * Output:
   *   - Chuỗi thông tin tương ứng.
   */
  std::string UserService::getUserInfo(const models::User& user, enums::UserInfo info) {
    switch (info) {
      case enums::UserInfo::ID:
        return std::to_string(user.getId());
      case enums::UserInfo::USERNAME:
        return user.getUsername();
      case enums::UserInfo::EMAIL:
        return user.getEmail();
      case enums::UserInfo::FULL_NAME:
        return user.getFullName();
      default:
        return "";
    }
  }

  /**
   * @brief Tìm người dùng theo ID.
   *
   * Hàm này tìm kiếm một người dùng trong file "data/users.json" dựa trên
   * ID duy nhất của họ. Nó trả về một đối tượng `models::User` nếu tìm thấy,
   * ngược lại sẽ trả về một `std::optional` rỗng.
   *
   * @param userId ID số nguyên duy nhất của người dùng cần tìm.
   * @return Một đối tượng `std::optional<models::User>` chứa dữ liệu người dùng nếu tìm thấy,
   * hoặc `std::nullopt` nếu không có người dùng nào tồn tại với ID đã cho.
   */
  std::optional<models::User> UserService::findUserModelById(int userId){
    json users = utils::storage::readJsonFile("data/users.json");
    for (const auto& user : users) {
      if (user["id"] == userId) {
        return models::User (
          user["id"].get<int>(),
        user["username"].get<std::string>(),
        user["passwordHash"].get<std::string>(),
        user["email"].get<std::string>(),
        user["fullName"].get<std::string>(),
        user["isAdmin"].get<bool>(),
        user["isPasswordAutoGenerated"].get<bool>()
      );
      }
    }
    return std::nullopt;
  }
  /**
   * @brief Tìm user theo ID.
   *
   * Input:
   *   - userId: ID người dùng.
   *
   * Output:
   *   - Trả về json của user nếu tìm thấy.
   *   - std::nullopt nếu không có.
   */
  std::optional<json> UserService::findUserById(int userId) {
    json users = utils::storage::readJsonFile("data/users.json");
    for (const auto& user : users) {
      if (user["id"] == userId) {
        return std::optional<json>(user);
      }
    }
    return std::nullopt;
  }

  /**
   * @brief Tìm user theo username.
   *
   * Input:
   *   - username: Tên đăng nhập.
   *
   * Output:
   *   - Trả về json của user nếu tìm thấy.
   *   - std::nullopt nếu không có.
   */
  std::optional<json> UserService::findUserByUsername(
      const std::string& username) {
    json users = utils::storage::readJsonFile("data/users.json");
    for (const auto& user : users) {
      if (user["username"] == username) return std::optional<json>(user);
    }
    return std::nullopt;
  }

  /**
   * @brief Lấy email của user theo ID.
   *
   * Input:
   *   - userId: ID người dùng.
   *
   * Output:
   *   - Trả về json chứa email nếu tìm thấy.
   *   - std::nullopt nếu không có.
   */
  std::optional<json> UserService::getUserEmail(int userId) {
    json users = utils::storage::readJsonFile("data/users.json");
    for (const auto& user : users) {
      if (user["id"] == userId) return std::optional<json>(user);
    }
    return std::nullopt;
  }

  /**
   * @brief Kiểm tra username có tồn tại trong danh sách hay không.
   *
   * Input:
   *   - users: Danh sách user dạng JSON.
   *   - username: Tên đăng nhập cần kiểm tra.
   *
   * Output:
   *   - true nếu tồn tại, false nếu không.
   */
  bool UserService::isUsernameExists(const json& users,
                                    const std::string& username) {
    for (const auto& user : users) {
      if (user["username"] == username) {
        return true;
      }
    }
    return false;
  }

  /**
   * @brief Kiểm tra email có tồn tại trong danh sách hay không.
   *
   * Input:
   *   - users: Danh sách user dạng JSON.
   *   - email: Email cần kiểm tra.
   *
   * Output:
   *   - true nếu tồn tại, false nếu không.
   */
  bool UserService::isEmailExists(const json& users, const std::string& email) {
    for (const auto& user : users) {
      if (user["email"] == email) {
        return true;
      }
    }
    return false;
  }

  /**
   * @brief Xóa user theo ID.
   *
   * Input:
   *   - userId: ID người dùng cần xóa.
   *
   * Output:
   *   - Không trả về giá trị.
   *   - Ném NotFoundException nếu user không tồn tại.
   *
   * Thủ tục xử lý:
   *   1. Đọc danh sách user từ file.
   *   2. Lọc bỏ user có ID trùng userId.
   *   3. Nếu không tìm thấy, ném ngoại lệ.
   *   4. Ghi danh sách mới vào file.
   */
  void UserService::deleteUser(const int userId) {
    json users = utils::storage::readJsonFile("data/users.json");
    json newUsers = json::array();
    bool found = false;

    for (const auto& user : users) {
      if (user["id"] == userId) {
        found = true;
      } else {
        newUsers.push_back(user);
      }
    }

    if (!found) {
      throw exceptions::NotFoundException("User not found");
    }

    utils::storage::writeJsonFile("data/users.json", newUsers);
  }
}  // namespace services