#include "services/UserService.hpp"

#include "exceptions/Exception.hpp"
#include "utils/ExceptionHandler.hpp"
#include "models/User.hpp"

namespace services {

void UserService::validateUserData(const std::string& username,
                                   const std::string& email) {
  json users = utils::storage::readJsonFile("data/users.json");

  for (const auto& user : users) {
    if (user["username"] == username)
      throw exceptions::ValidationException("Tên đăng nhập đã tồn tại!");

    if (user["email"] == email)
      throw exceptions::ValidationException("Email đã tồn tại");
  }
}
void UserService::validateUserEmail(const int userId, const std::string& email) {
  json users = utils::storage::readJsonFile("data/users.json");

  for (const auto& user : users) {
    if (user["email"] == email && user["id"] != userId)
      throw exceptions::ValidationException("Email đã tồn tại");
  }
}

models::User UserService::createUser(const std::string& username,
                                     const std::string& password,
                                     const std::string& email,
                                     const std::string& fullName,
                                     const bool isAdmin,
                                     const bool isPasswordAutoGenerated) {
  json users = utils::storage::readJsonFile("data/users.json");
  int newUserId = utils::storage::getNextUserId(users);

  std::string passwordHash = utils::hash::generatePasswordHash(password);
  models::User user(newUserId, username, passwordHash, email, fullName, isAdmin,
                    isPasswordAutoGenerated);

  json userData = user.toJson();
  users.push_back(userData);

  utils::storage::writeJsonFile("data/users.json", users);

  return user;
}
std::vector<models::User> UserService::getAllUsers(bool isAdmin) {
  json users = utils::storage::readJsonFile("data/users.json");
  if (users.empty()) {
    throw exceptions::NotFoundException("Không có người dùng nào trong hệ thống.");
  }

  std::vector<models::User> userList;
  for (const auto& user : users) {
    if (user["isAdmin"].get<bool>() == isAdmin) {
      models::User u(
        user["id"].get<int>(),
      user["username"].get<std::string>(),
      user["passwordHash"].get<std::string>(),
      user["email"].get<std::string>(),
      user["fullName"].get<std::string>(),
      user["isAdmin"].get<bool>(),
      user["isPasswordAutoGenerated"].get<bool>()
    );
    userList.push_back(u);
    }
  }
  return userList;
}

std::optional<json> UserService::findUserById(int userId) {
  json users = utils::storage::readJsonFile("data/users.json");
  for (const auto& user : users) {
    if (user["id"] == userId) {
      return std::optional<json>(user);
    }
  }

  return std::nullopt;
}

std::optional<json> UserService::findUserByUsername(
    const std::string& username) {
  json users = utils::storage::readJsonFile("data/users.json");
  for (const auto& user : users) {
    if (user["username"] == username) return std::optional<json>(user);
  }
  return std::nullopt;
}

std::optional<json> UserService::getUserEmail(int userId) {
  json users = utils::storage::readJsonFile("data/users.json");
  for (const auto& user : users) {
    if (user["id"] == userId) return std::optional<json>(user);
  }
  return std::nullopt;
}

bool UserService::isUsernameExists(const json& users,
                                   const std::string& username) {
  for (const auto& user : users) {
    if (user["username"] == username) {
      return true;
    }
  }
  return false;
}

bool UserService::isEmailExists(const json& users, const std::string& email) {
  for (const auto& user : users) {
    if (user["email"] == email) {
      return true;
    }
  }
  return false;
}

void UserService::deleteUser(const int userId) {
  json users = utils::storage::readJsonFile("data/users.json");
  json newUsers = json::array();
  bool found = false;

  for (const auto& user : users) {
    if (user["id"] == userId) {
      found = true;
    } else {
      newUsers.push_back(user);
    }
  }

  if (!found) {
    throw exceptions::NotFoundException("User not found");
  }

  utils::storage::writeJsonFile("data/users.json", newUsers);
}

}  // namespace services