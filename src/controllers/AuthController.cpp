#include "controllers/AuthController.hpp"

#include <iostream>
#include <tuple>

#include "controllers/WalletController.hpp"
#include "models/User.hpp"
#include "services/OtpService.hpp"
#include "utils/Hash.hpp"
#include "utils/Password.hpp"
#include "utils/Storage.hpp"

namespace controllers {

std::tuple<bool, int, bool> AuthController::login(const std::string& username,
                                                  const std::string& password) {
  try {
    // Đọc file users.json
    json users = utils::storage::readJsonFile("data/users.json");

    for (const auto& user : users) {
      if (user["username"] == username) {
        bool isMathPassword =
            utils::hash::validatePassword(password, user["passwordHash"]);

        if (!isMathPassword) break;

        std::cout << "Đăng nhập thành công!" << std::endl;
        return {true, user["id"], user["isAdmin"]};
      }
    }

    std::cout << "Tên đăng nhập hoặc mật khẩu không đúng!" << std::endl;
    return {false, -1, false};

  } catch (const std::exception& e) {
    std::cout << "Lỗi: " << e.what() << std::endl;
    return {false, -1, false};
  }
}

bool AuthController::registerUser(const std::string& username,
                                  const std::string& password,
                                  const std::string& email,
                                  const std::string& fullName) {
  try {
    // Đọc file users.json hiện tại
    json users = utils::storage::readJsonFile("data/users.json");

    // Kiểm tra username đã tồn tại chưa
    for (const auto& user : users) {
      if (user["username"] == username) {
        std::cout << "Tên đăng nhập đã tồn tại!" << std::endl;
        return false;
      }
      if (user["email"] == email) {
        std::cout << "Email đã tồn tại!" << std::endl;
        return false;
      }
    }

    // Tạo đối tượng User
    std::string passwordHash = utils::hash::generatePasswordHash(password);
    models::User newUser(username, passwordHash, email, fullName);

    // Thêm thông tin người dùng mới
    json userData;
    int newUserId = utils::storage::getNextUserId(users);
    userData["id"] = newUserId;
    userData["username"] = newUser.getUsername();
    userData["passwordHash"] = newUser.getPasswordHash();
    userData["email"] = newUser.getEmail();
    userData["fullName"] = newUser.getFullName();
    userData["isAdmin"] = newUser.isAdminUser();
    userData["isPasswordAutoGenerated"] = newUser.getIsPasswordAutoGenerated();
    userData["createdAt"] = newUser.getCreatedAt();

    users.push_back(userData);

    // Lưu user vào file
    if (!utils::storage::writeJsonFile("data/users.json", users)) {
      std::cout << "Không thể lưu thông tin người dùng!" << std::endl;
      return false;
    }

    // Tự động tạo ví cho user mới
    if (!controllers::WalletController::createWallet(newUserId, 0.0)) {
      std::cout << "Cảnh báo: Không thể tạo ví cho user mới!" << std::endl;
      // Không return false vì user đã được tạo thành công
    }

    std::cout << "Đăng ký thành công!" << std::endl;
    return true;
  } catch (const std::exception& e) {
    std::cout << "Lỗi: " << e.what() << std::endl;
    return false;
  }
}

bool AuthController::createUserByAdmin(const std::string& username,
                                       const std::string& email,
                                       const std::string& fullName,
                                       std::string& generatedPassword) {
  try {
    // Đọc file users.json hiện tại
    json users = utils::storage::readJsonFile("data/users.json");

    // Kiểm tra username đã tồn tại chưa
    for (const auto& user : users) {
      if (user["username"] == username) {
        std::cout << "Tên đăng nhập đã tồn tại!" << std::endl;
        return false;
      }
      if (user["email"] == email) {
        std::cout << "Email đã tồn tại!" << std::endl;
        return false;
      }
    }

    // Tạo mật khẩu ngẫu nhiên
    generatedPassword = utils::password::generateRandomPassword(8);

    // Tạo đối tượng User
    std::string passwordHash =
        utils::hash::generatePasswordHash(generatedPassword);
    models::User newUser(username, passwordHash, email, fullName);

    // Thêm thông tin người dùng mới
    json userData;
    int newUserId = utils::storage::getNextUserId(users);
    userData["id"] = newUserId;
    userData["username"] = newUser.getUsername();
    userData["passwordHash"] = newUser.getPasswordHash();
    userData["email"] = newUser.getEmail();
    userData["fullName"] = newUser.getFullName();
    userData["isAdmin"] = newUser.isAdminUser();
    userData["isPasswordAutoGenerated"] =
        true;  // Đánh dấu mật khẩu được tạo tự động
    userData["createdAt"] = newUser.getCreatedAt();

    users.push_back(userData);

    // Lưu user vào file
    if (!utils::storage::writeJsonFile("data/users.json", users)) {
      std::cout << "Không thể lưu thông tin người dùng!" << std::endl;
      return false;
    }

    // Tự động tạo ví cho user mới
    if (!controllers::WalletController::createWallet(newUserId, 0.0)) {
      std::cout << "Cảnh báo: Không thể tạo ví cho user mới!" << std::endl;
      // Không return false vì user đã được tạo thành công
    }

    std::cout << "Tạo user thành công!" << std::endl;
    return true;
  } catch (const std::exception& e) {
    std::cout << "Lỗi: " << e.what() << std::endl;
    return false;
  }
}

bool AuthController::changePassword(const int userId,
                                    const std::string& currentPassword,
                                    const std::string& newPassword) {
  try {
    // Lấy danh sách users
    json users = utils::storage::readJsonFile("data/users.json");

    // Tìm user cần đổi mật khẩu
    for (auto& user : users) {
      if (user["id"] == userId) {
        bool isMathPasword = utils::hash::validatePassword(
            currentPassword, user["passwordHash"]);

        if (!isMathPasword) {
          std::cout << "Mật khẩu hiện tại không đúng!" << std::endl;
          return false;
        }

        // Cập nhật mật khẩu mới
        user["passwordHash"] = utils::hash::generatePasswordHash(newPassword);
        user["isPasswordAutoGenerated"] = false;

        // Lưu user vừa cập nhật vào file
        if (!utils::storage::writeJsonFile("data/users.json", users)) {
          std::cout << "Không thể lưu thông tin người dùng!" << std::endl;
          return false;
        }

        return true;
      }
    }

    std::cout << "Không tìm thấy user cần đổi mật khẩu!" << std::endl;
    return false;

  } catch (const std::exception& e) {
    std::cout << "Lỗi: " << e.what() << std::endl;
    return false;
  }
}

bool AuthController::sendOTPInfoChange(const int userId) {
  try {
    json users = utils::storage::readJsonFile("data/users.json");
    std::string email;
    for (const auto& user : users) {
      if (user["id"] == userId) {
        email = user["email"];
        break;
      }
    }
    // Gửi OTP
    return services::OtpService::generateAndSendOTP(userId, email);
  } catch (const std::exception& e) {
    std::cout << "Lỗi khi gửi OTP: " << e.what() << std::endl;
    return false;
  }
}

bool AuthController::verifyOTPAndChangePassword(
    const int userId, const std::string& otpCode,
    const std::string& currentPassword, const std::string& newPassword) {
  try {
    // Xác thực OTP trước
    if (!services::OtpService::verifyOTP(userId, otpCode,
                                         models::OTPType::INFO_CHANGE)) {
      return false;
    }

    // Nếu OTP hợp lệ, thực hiện đổi mật khẩu
    return changePassword(userId, currentPassword, newPassword);

  } catch (const std::exception& e) {
    std::cout << "Lỗi khi xác thực OTP và đổi mật khẩu: " << e.what()
              << std::endl;
    return false;
  }
}

}  // namespace controllers